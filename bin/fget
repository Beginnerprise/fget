#!/usr/bin/env node

/**********************************************************************
 * Logging Options:
 *   logging - Enables any logging at all
 *   debug - Enable extra output to help debug problem
 *   verbose - OMG, you must be developing.  You probably don't want
 *   $others - Any can be enabled/disabled but default to enabled
 *********************************************************************/
var log = require('iphb-logs');

/**********************************************************************
 * Help Text
 *********************************************************************/

// See Docopts Syntax here:
//   http://bit.ly/1EQXdRe

var help = [
  "Usage:",
  "  fget [options] -u <username> -p <password> <url>",
  "  fget [options] <url>",
  "  fget [options]",
  "",
  "Options:",
  "  -c <chunks>        Specify how many chunks to try",
  "  -d --debug         Enable Debug Output",
  "  -f <filename>      Save the file as this name instead",
  "  -h --help          Show this help",
  "  -p <password>      Password for basic auth",
  "  -q --quiet         Disable Log Output",
  "  -v --verbose       Enable Verbose Output",
  "  -u <username>      Username for basic auth",
  "",
  "When possible this command will cut the file specified by URL into chunks",
  "and download the file using multiple TCP streams to speed up high latency",
  "connections",
  "",
].join('\n');

/**********************************************************************
 * Libraries
 *********************************************************************/
var docopt = require('docopt').docopt;
var options = docopt(help);
var progress = require('progress');

log.enable.logging = true;
log.enable.error = true;

if (options['<url>'] === null) {
  log.error("You must provide a url");
  process.exit(1);
}

log.enable.logging = !options['--quiet'];
log.enable.debug = options['--debug'];
log.enable.verbose = options['--verbose'];

var api = require('../lib/api.js');

/**********************************************************************
 * Handle Options
 *********************************************************************/

// Emit our command line options if debug is set
log.debug("Command Line Settings:", options);

var reqOptions = {
  uri: options['<url>']
};

if (options['-u'] !== null && options['-p'] !== null) {
  reqOptions.auth = [options['-u'], ":", options['-p']].join('');
}

if (options['-c'] !== null) {
  api.maximumConnections = parseInt(options['-c'], 10);
}

api.filename = options['-f'];

/**********************************************************************
 * Main
 *********************************************************************/

// Progress bar
var _bar = null;
// For calculating how much is left to download
var _lastPercent = 0;
// Interval ID for status updates which can get cleared in a few different scenarios
var _statusInterval = null;
// Start/Finish timers to get total run time
var _startTime = new Date();
var _finishTime = null;


/**
 * @function    _displayStatus
 * @description Query the api for status metadata and provide a moving status
 *              bar to the user with progress that indicates what's going on.
 *              This works on an interval and stops updating the user after
 *              the status reaches 100%
 */
var _displayStatus = function() {
  var _status = api.status();
  log.debug("Status Tick");
  log.verbose(_status);
  // If we haven't started or have reached 100%, don't emit anything
  if (_status.totalDownloaded === 0 || _status.totalDownloadSize === 0 || _lastPercent >= 100) {
    return;
  }
  // If our progress bar hasn't been created and we've actually downloaded
  // something let's get the ball rolling
  if (!_bar && _status.totalDownloadSize > 0) {
    _bar = new progress(':filename :percent[:bar] :sz  :speed  ETA :est', {
      complete: '=',
      incomplete: ' ',
      width: process.stdout.columns - (50 + _status.filename.length),
      total: 100,
      est: "0:00s",
      speed: "0mb",
      sz: "0b"
    });
  }
  // All we're doing here is keeping track of how much of a percent is done right
  // now and then subtracting what it was 'last' round to get the actual
  // percent of this tick and not the progress of the whole thing.  The status
  // bar mod wants you to provide how much 'this' tick proceeded.  You do not
  // provide the mod 'where' you are in total.
  var _thisPercent = Math.ceil(_status.totalDownloaded / _status.totalDownloadSize * 100);
  var _thisTime = _thisPercent - _lastPercent;
  _lastPercent += _thisTime;
  _bar.tick(_thisTime, {
    speed: _status.averageSpeedWithUnits,
    filename: _status.filename,
    est: [_status.estTimeLeftFriendlyFormat, "s"].join(''),
    sz: _status.totalDownloaded
  });
  // If we're done.. kill the interval
  if (_thisPercent >= 100) {
    if (_statusInterval !== null) {
      clearInterval(_statusInterval);
    }
  }
};

// Go ahead an start emitting progress
_statusInterval = setInterval(_displayStatus, 500);

api.get(reqOptions, function(err) {
  clearInterval(_statusInterval);
  if (err) {
    return log.error("Error", err);
  }
  log.debug("All done!");
  // Make sure the status bar completes.  On tiny files it's possible
  // for the status bar to only be at 20% when the file finishes.  This
  // last tick will make sure it fills the bar and looks 'normal' to the user.
  _displayStatus();
  // Huge files may download faster than the hard disk can keep up.  In these
  // cases the file will buffer into ram and have to dump to disk as it can.
  // In some cases this can take a really long time and the user has no indication
  // of what's happening.  Thus, this little message should avoid confusion.
  console.log("Finishing writing file to disk...");
  // Output total runtime summary
  _finishTime = new Date();
  var _status = api.status();
  var _msg = [
    "Download Complete |",
    _status.totalDownloaded, "bytes |",
    _status.averageSpeedWithUnits, "|", (_finishTime - _startTime) / 1000, "secs"
  ].join(' ');
  console.log(_msg);

});

/**********************************************************************
 * Signal Handling
 *********************************************************************/

// Capture signals and cleanup after ourselves if we've begun a download
var _captureSignal = function(signal) {
  process.on(signal, function() {
    clearInterval(_statusInterval);
    console.log("");
    log.warn("Cancelling Download");
    api.cancel();
    setTimeout(process.exit, 5000);
  });
};

_captureSignal("SIGTERM");
_captureSignal("SIGINT");
